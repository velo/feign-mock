# feign-mock

image:https://travis-ci.org/velo/feign-mock.svg?branch=master["Build Status", link="https://travis-ci.org/velo/feign-mock"]
image:https://coveralls.io/repos/github/velo/feign-mock/badge.svg?branch=master["Coverage Status", link="https://coveralls.io/github/velo/feign-mock?branch=master"]
image:https://maven-badges.herokuapp.com/maven-central/com.marvinformatics.feign/feign-mock/badge.svg["Maven Central", link="https://maven-badges.herokuapp.com/maven-central/com.marvinformatics.feign/feign-mock/"]
image:https://img.shields.io/github/issues/velo/feign-mock.svg["Issues", link="https://github.com/velo/feign-mock/issues"]
image:https://img.shields.io/github/forks/velo/feign-mock.svg["Forks", link="https://github.com/velo/feign-mock/network"]
image:https://img.shields.io/github/stars/velo/feign-mock.svg["Stars", link="https://github.com/velo/feign-mock/stargazers"]

An easy way to test https://github.com/Netflix/feign. Since feign stores most of the logic in annotations, this helps to check if the annotations are correct.

The original article is available https://velo.github.io/2016/06/05/Testing-feign-clients.html[here]

If mocking feign clients is easy, testing the logic written in annotations is not!

To check if you are parsing the request/response properly, the only way is firing a real request. Well, that doesn't seem to be a good path to unit (or even integration) test remote services. Any IO change will affect test stability.

That is why I created https://github.com/velo/feign-mock[feign-mock].

With feign-mock you can use pre-loaded JSON strings or streams as content for your responses. It also allows you to verify mocked invocations and feign-mock will hit your annotations to make sure everything works.

##### Example

```
  private GitHub github;
  private MockClient mockClient;

  @Before
  public void setup() throws IOException {
    mockClient = new MockClient()
        .noContent(HttpMethod.PATCH, "/repos/velo/feign-mock/contributors");

    github = Feign.builder()
        .decoder(new GsonDecoder())
        .client(mockClient)
        .target(new MockTarget<>(GitHub.class));
  }

  @After
  public void tearDown() {
    mockClient.verifyStatus();
  }

  @Test
  public void missHttpMethod() {
    List<Contributor> result = github.patchContributors("velo", "feign-mock");
    assertThat(result, nullValue());
    mockClient.verifyOne(HttpMethod.PATCH, "/repos/velo/feign-mock/contributors");
  }
```

This simple test returns no content and verifies that the URL was truly invoked.

On the mocked client, you can include all URLs and methods you want to mock.

For more comprehensive examples take a look at https://github.com/velo/feign-mock/blob/master/src/test/java/feign/mock/MockClientTest.java[MockClientTest].
